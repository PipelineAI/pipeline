# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: tensorflow/core/protobuf/worker_service.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from tensorflow.core.protobuf import worker_pb2 as tensorflow_dot_core_dot_protobuf_dot_worker__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='tensorflow/core/protobuf/worker_service.proto',
  package='tensorflow.grpc',
  syntax='proto3',
  serialized_pb=_b('\n-tensorflow/core/protobuf/worker_service.proto\x12\x0ftensorflow.grpc\x1a%tensorflow/core/protobuf/worker.proto2\x99\x07\n\rWorkerService\x12H\n\tGetStatus\x12\x1c.tensorflow.GetStatusRequest\x1a\x1d.tensorflow.GetStatusResponse\x12\x66\n\x13\x43reateWorkerSession\x12&.tensorflow.CreateWorkerSessionRequest\x1a\'.tensorflow.CreateWorkerSessionResponse\x12\x66\n\x13\x44\x65leteWorkerSession\x12&.tensorflow.DeleteWorkerSessionRequest\x1a\'.tensorflow.DeleteWorkerSessionResponse\x12T\n\rRegisterGraph\x12 .tensorflow.RegisterGraphRequest\x1a!.tensorflow.RegisterGraphResponse\x12Z\n\x0f\x44\x65registerGraph\x12\".tensorflow.DeregisterGraphRequest\x1a#.tensorflow.DeregisterGraphResponse\x12\x45\n\x08RunGraph\x12\x1b.tensorflow.RunGraphRequest\x1a\x1c.tensorflow.RunGraphResponse\x12Q\n\x0c\x43leanupGraph\x12\x1f.tensorflow.CleanupGraphRequest\x1a .tensorflow.CleanupGraphResponse\x12K\n\nCleanupAll\x12\x1d.tensorflow.CleanupAllRequest\x1a\x1e.tensorflow.CleanupAllResponse\x12M\n\nRecvTensor\x12\x1d.tensorflow.RecvTensorRequest\x1a\x1e.tensorflow.RecvTensorResponse\"\x00\x12\x42\n\x07Logging\x12\x1a.tensorflow.LoggingRequest\x1a\x1b.tensorflow.LoggingResponse\x12\x42\n\x07Tracing\x12\x1a.tensorflow.TracingRequest\x1a\x1b.tensorflow.TracingResponseB3\n\x1aorg.tensorflow.distruntimeB\x13WorkerServiceProtosP\x01\x62\x06proto3')
  ,
  dependencies=[tensorflow_dot_core_dot_protobuf_dot_worker__pb2.DESCRIPTOR,])



_sym_db.RegisterFileDescriptor(DESCRIPTOR)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\032org.tensorflow.distruntimeB\023WorkerServiceProtosP\001'))
try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class WorkerServiceStub(object):
    """//////////////////////////////////////////////////////////////////////////////

    WorkerService defines a TensorFlow service that executes dataflow
    graphs on a set of local devices, on behalf of a MasterService.

    A worker service keeps track of multiple "registered graphs". Each
    registered graph is a subgraph of a client's graph, corresponding to
    only the nodes that should execute on this worker (and any
    additional nodes necessary for inter-process communication using
    the `RecvTensor` method).

    //////////////////////////////////////////////////////////////////////////////

    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.GetStatus = channel.unary_unary(
          '/tensorflow.grpc.WorkerService/GetStatus',
          request_serializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.GetStatusRequest.SerializeToString,
          response_deserializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.GetStatusResponse.FromString,
          )
      self.CreateWorkerSession = channel.unary_unary(
          '/tensorflow.grpc.WorkerService/CreateWorkerSession',
          request_serializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.CreateWorkerSessionRequest.SerializeToString,
          response_deserializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.CreateWorkerSessionResponse.FromString,
          )
      self.DeleteWorkerSession = channel.unary_unary(
          '/tensorflow.grpc.WorkerService/DeleteWorkerSession',
          request_serializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.DeleteWorkerSessionRequest.SerializeToString,
          response_deserializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.DeleteWorkerSessionResponse.FromString,
          )
      self.RegisterGraph = channel.unary_unary(
          '/tensorflow.grpc.WorkerService/RegisterGraph',
          request_serializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.RegisterGraphRequest.SerializeToString,
          response_deserializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.RegisterGraphResponse.FromString,
          )
      self.DeregisterGraph = channel.unary_unary(
          '/tensorflow.grpc.WorkerService/DeregisterGraph',
          request_serializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.DeregisterGraphRequest.SerializeToString,
          response_deserializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.DeregisterGraphResponse.FromString,
          )
      self.RunGraph = channel.unary_unary(
          '/tensorflow.grpc.WorkerService/RunGraph',
          request_serializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.RunGraphRequest.SerializeToString,
          response_deserializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.RunGraphResponse.FromString,
          )
      self.CleanupGraph = channel.unary_unary(
          '/tensorflow.grpc.WorkerService/CleanupGraph',
          request_serializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.CleanupGraphRequest.SerializeToString,
          response_deserializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.CleanupGraphResponse.FromString,
          )
      self.CleanupAll = channel.unary_unary(
          '/tensorflow.grpc.WorkerService/CleanupAll',
          request_serializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.CleanupAllRequest.SerializeToString,
          response_deserializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.CleanupAllResponse.FromString,
          )
      self.RecvTensor = channel.unary_unary(
          '/tensorflow.grpc.WorkerService/RecvTensor',
          request_serializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.RecvTensorRequest.SerializeToString,
          response_deserializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.RecvTensorResponse.FromString,
          )
      self.Logging = channel.unary_unary(
          '/tensorflow.grpc.WorkerService/Logging',
          request_serializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.LoggingRequest.SerializeToString,
          response_deserializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.LoggingResponse.FromString,
          )
      self.Tracing = channel.unary_unary(
          '/tensorflow.grpc.WorkerService/Tracing',
          request_serializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.TracingRequest.SerializeToString,
          response_deserializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.TracingResponse.FromString,
          )


  class WorkerServiceServicer(object):
    """//////////////////////////////////////////////////////////////////////////////

    WorkerService defines a TensorFlow service that executes dataflow
    graphs on a set of local devices, on behalf of a MasterService.

    A worker service keeps track of multiple "registered graphs". Each
    registered graph is a subgraph of a client's graph, corresponding to
    only the nodes that should execute on this worker (and any
    additional nodes necessary for inter-process communication using
    the `RecvTensor` method).

    //////////////////////////////////////////////////////////////////////////////

    """

    def GetStatus(self, request, context):
      """See worker.proto for details.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def CreateWorkerSession(self, request, context):
      """See worker.proto for details.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def DeleteWorkerSession(self, request, context):
      """See worker.proto for details.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def RegisterGraph(self, request, context):
      """See worker.proto for details.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def DeregisterGraph(self, request, context):
      """See worker.proto for details.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def RunGraph(self, request, context):
      """See worker.proto for details.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def CleanupGraph(self, request, context):
      """See worker.proto for details.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def CleanupAll(self, request, context):
      """See worker.proto for details.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def RecvTensor(self, request, context):
      """See worker.proto for details.
      RecvTensor Method
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def Logging(self, request, context):
      """See worker.proto for details.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def Tracing(self, request, context):
      """See worker.proto for details.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_WorkerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'GetStatus': grpc.unary_unary_rpc_method_handler(
            servicer.GetStatus,
            request_deserializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.GetStatusRequest.FromString,
            response_serializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.GetStatusResponse.SerializeToString,
        ),
        'CreateWorkerSession': grpc.unary_unary_rpc_method_handler(
            servicer.CreateWorkerSession,
            request_deserializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.CreateWorkerSessionRequest.FromString,
            response_serializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.CreateWorkerSessionResponse.SerializeToString,
        ),
        'DeleteWorkerSession': grpc.unary_unary_rpc_method_handler(
            servicer.DeleteWorkerSession,
            request_deserializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.DeleteWorkerSessionRequest.FromString,
            response_serializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.DeleteWorkerSessionResponse.SerializeToString,
        ),
        'RegisterGraph': grpc.unary_unary_rpc_method_handler(
            servicer.RegisterGraph,
            request_deserializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.RegisterGraphRequest.FromString,
            response_serializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.RegisterGraphResponse.SerializeToString,
        ),
        'DeregisterGraph': grpc.unary_unary_rpc_method_handler(
            servicer.DeregisterGraph,
            request_deserializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.DeregisterGraphRequest.FromString,
            response_serializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.DeregisterGraphResponse.SerializeToString,
        ),
        'RunGraph': grpc.unary_unary_rpc_method_handler(
            servicer.RunGraph,
            request_deserializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.RunGraphRequest.FromString,
            response_serializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.RunGraphResponse.SerializeToString,
        ),
        'CleanupGraph': grpc.unary_unary_rpc_method_handler(
            servicer.CleanupGraph,
            request_deserializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.CleanupGraphRequest.FromString,
            response_serializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.CleanupGraphResponse.SerializeToString,
        ),
        'CleanupAll': grpc.unary_unary_rpc_method_handler(
            servicer.CleanupAll,
            request_deserializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.CleanupAllRequest.FromString,
            response_serializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.CleanupAllResponse.SerializeToString,
        ),
        'RecvTensor': grpc.unary_unary_rpc_method_handler(
            servicer.RecvTensor,
            request_deserializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.RecvTensorRequest.FromString,
            response_serializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.RecvTensorResponse.SerializeToString,
        ),
        'Logging': grpc.unary_unary_rpc_method_handler(
            servicer.Logging,
            request_deserializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.LoggingRequest.FromString,
            response_serializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.LoggingResponse.SerializeToString,
        ),
        'Tracing': grpc.unary_unary_rpc_method_handler(
            servicer.Tracing,
            request_deserializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.TracingRequest.FromString,
            response_serializer=tensorflow_dot_core_dot_protobuf_dot_worker__pb2.TracingResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'tensorflow.grpc.WorkerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaWorkerServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """//////////////////////////////////////////////////////////////////////////////

    WorkerService defines a TensorFlow service that executes dataflow
    graphs on a set of local devices, on behalf of a MasterService.

    A worker service keeps track of multiple "registered graphs". Each
    registered graph is a subgraph of a client's graph, corresponding to
    only the nodes that should execute on this worker (and any
    additional nodes necessary for inter-process communication using
    the `RecvTensor` method).

    //////////////////////////////////////////////////////////////////////////////

    """
    def GetStatus(self, request, context):
      """See worker.proto for details.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def CreateWorkerSession(self, request, context):
      """See worker.proto for details.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def DeleteWorkerSession(self, request, context):
      """See worker.proto for details.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def RegisterGraph(self, request, context):
      """See worker.proto for details.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def DeregisterGraph(self, request, context):
      """See worker.proto for details.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def RunGraph(self, request, context):
      """See worker.proto for details.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def CleanupGraph(self, request, context):
      """See worker.proto for details.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def CleanupAll(self, request, context):
      """See worker.proto for details.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def RecvTensor(self, request, context):
      """See worker.proto for details.
      RecvTensor Method
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def Logging(self, request, context):
      """See worker.proto for details.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def Tracing(self, request, context):
      """See worker.proto for details.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaWorkerServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """//////////////////////////////////////////////////////////////////////////////

    WorkerService defines a TensorFlow service that executes dataflow
    graphs on a set of local devices, on behalf of a MasterService.

    A worker service keeps track of multiple "registered graphs". Each
    registered graph is a subgraph of a client's graph, corresponding to
    only the nodes that should execute on this worker (and any
    additional nodes necessary for inter-process communication using
    the `RecvTensor` method).

    //////////////////////////////////////////////////////////////////////////////

    """
    def GetStatus(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """See worker.proto for details.
      """
      raise NotImplementedError()
    GetStatus.future = None
    def CreateWorkerSession(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """See worker.proto for details.
      """
      raise NotImplementedError()
    CreateWorkerSession.future = None
    def DeleteWorkerSession(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """See worker.proto for details.
      """
      raise NotImplementedError()
    DeleteWorkerSession.future = None
    def RegisterGraph(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """See worker.proto for details.
      """
      raise NotImplementedError()
    RegisterGraph.future = None
    def DeregisterGraph(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """See worker.proto for details.
      """
      raise NotImplementedError()
    DeregisterGraph.future = None
    def RunGraph(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """See worker.proto for details.
      """
      raise NotImplementedError()
    RunGraph.future = None
    def CleanupGraph(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """See worker.proto for details.
      """
      raise NotImplementedError()
    CleanupGraph.future = None
    def CleanupAll(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """See worker.proto for details.
      """
      raise NotImplementedError()
    CleanupAll.future = None
    def RecvTensor(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """See worker.proto for details.
      RecvTensor Method
      """
      raise NotImplementedError()
    RecvTensor.future = None
    def Logging(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """See worker.proto for details.
      """
      raise NotImplementedError()
    Logging.future = None
    def Tracing(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """See worker.proto for details.
      """
      raise NotImplementedError()
    Tracing.future = None


  def beta_create_WorkerService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('tensorflow.grpc.WorkerService', 'CleanupAll'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.CleanupAllRequest.FromString,
      ('tensorflow.grpc.WorkerService', 'CleanupGraph'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.CleanupGraphRequest.FromString,
      ('tensorflow.grpc.WorkerService', 'CreateWorkerSession'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.CreateWorkerSessionRequest.FromString,
      ('tensorflow.grpc.WorkerService', 'DeleteWorkerSession'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.DeleteWorkerSessionRequest.FromString,
      ('tensorflow.grpc.WorkerService', 'DeregisterGraph'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.DeregisterGraphRequest.FromString,
      ('tensorflow.grpc.WorkerService', 'GetStatus'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.GetStatusRequest.FromString,
      ('tensorflow.grpc.WorkerService', 'Logging'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.LoggingRequest.FromString,
      ('tensorflow.grpc.WorkerService', 'RecvTensor'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.RecvTensorRequest.FromString,
      ('tensorflow.grpc.WorkerService', 'RegisterGraph'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.RegisterGraphRequest.FromString,
      ('tensorflow.grpc.WorkerService', 'RunGraph'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.RunGraphRequest.FromString,
      ('tensorflow.grpc.WorkerService', 'Tracing'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.TracingRequest.FromString,
    }
    response_serializers = {
      ('tensorflow.grpc.WorkerService', 'CleanupAll'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.CleanupAllResponse.SerializeToString,
      ('tensorflow.grpc.WorkerService', 'CleanupGraph'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.CleanupGraphResponse.SerializeToString,
      ('tensorflow.grpc.WorkerService', 'CreateWorkerSession'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.CreateWorkerSessionResponse.SerializeToString,
      ('tensorflow.grpc.WorkerService', 'DeleteWorkerSession'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.DeleteWorkerSessionResponse.SerializeToString,
      ('tensorflow.grpc.WorkerService', 'DeregisterGraph'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.DeregisterGraphResponse.SerializeToString,
      ('tensorflow.grpc.WorkerService', 'GetStatus'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.GetStatusResponse.SerializeToString,
      ('tensorflow.grpc.WorkerService', 'Logging'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.LoggingResponse.SerializeToString,
      ('tensorflow.grpc.WorkerService', 'RecvTensor'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.RecvTensorResponse.SerializeToString,
      ('tensorflow.grpc.WorkerService', 'RegisterGraph'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.RegisterGraphResponse.SerializeToString,
      ('tensorflow.grpc.WorkerService', 'RunGraph'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.RunGraphResponse.SerializeToString,
      ('tensorflow.grpc.WorkerService', 'Tracing'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.TracingResponse.SerializeToString,
    }
    method_implementations = {
      ('tensorflow.grpc.WorkerService', 'CleanupAll'): face_utilities.unary_unary_inline(servicer.CleanupAll),
      ('tensorflow.grpc.WorkerService', 'CleanupGraph'): face_utilities.unary_unary_inline(servicer.CleanupGraph),
      ('tensorflow.grpc.WorkerService', 'CreateWorkerSession'): face_utilities.unary_unary_inline(servicer.CreateWorkerSession),
      ('tensorflow.grpc.WorkerService', 'DeleteWorkerSession'): face_utilities.unary_unary_inline(servicer.DeleteWorkerSession),
      ('tensorflow.grpc.WorkerService', 'DeregisterGraph'): face_utilities.unary_unary_inline(servicer.DeregisterGraph),
      ('tensorflow.grpc.WorkerService', 'GetStatus'): face_utilities.unary_unary_inline(servicer.GetStatus),
      ('tensorflow.grpc.WorkerService', 'Logging'): face_utilities.unary_unary_inline(servicer.Logging),
      ('tensorflow.grpc.WorkerService', 'RecvTensor'): face_utilities.unary_unary_inline(servicer.RecvTensor),
      ('tensorflow.grpc.WorkerService', 'RegisterGraph'): face_utilities.unary_unary_inline(servicer.RegisterGraph),
      ('tensorflow.grpc.WorkerService', 'RunGraph'): face_utilities.unary_unary_inline(servicer.RunGraph),
      ('tensorflow.grpc.WorkerService', 'Tracing'): face_utilities.unary_unary_inline(servicer.Tracing),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_WorkerService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('tensorflow.grpc.WorkerService', 'CleanupAll'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.CleanupAllRequest.SerializeToString,
      ('tensorflow.grpc.WorkerService', 'CleanupGraph'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.CleanupGraphRequest.SerializeToString,
      ('tensorflow.grpc.WorkerService', 'CreateWorkerSession'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.CreateWorkerSessionRequest.SerializeToString,
      ('tensorflow.grpc.WorkerService', 'DeleteWorkerSession'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.DeleteWorkerSessionRequest.SerializeToString,
      ('tensorflow.grpc.WorkerService', 'DeregisterGraph'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.DeregisterGraphRequest.SerializeToString,
      ('tensorflow.grpc.WorkerService', 'GetStatus'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.GetStatusRequest.SerializeToString,
      ('tensorflow.grpc.WorkerService', 'Logging'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.LoggingRequest.SerializeToString,
      ('tensorflow.grpc.WorkerService', 'RecvTensor'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.RecvTensorRequest.SerializeToString,
      ('tensorflow.grpc.WorkerService', 'RegisterGraph'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.RegisterGraphRequest.SerializeToString,
      ('tensorflow.grpc.WorkerService', 'RunGraph'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.RunGraphRequest.SerializeToString,
      ('tensorflow.grpc.WorkerService', 'Tracing'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.TracingRequest.SerializeToString,
    }
    response_deserializers = {
      ('tensorflow.grpc.WorkerService', 'CleanupAll'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.CleanupAllResponse.FromString,
      ('tensorflow.grpc.WorkerService', 'CleanupGraph'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.CleanupGraphResponse.FromString,
      ('tensorflow.grpc.WorkerService', 'CreateWorkerSession'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.CreateWorkerSessionResponse.FromString,
      ('tensorflow.grpc.WorkerService', 'DeleteWorkerSession'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.DeleteWorkerSessionResponse.FromString,
      ('tensorflow.grpc.WorkerService', 'DeregisterGraph'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.DeregisterGraphResponse.FromString,
      ('tensorflow.grpc.WorkerService', 'GetStatus'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.GetStatusResponse.FromString,
      ('tensorflow.grpc.WorkerService', 'Logging'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.LoggingResponse.FromString,
      ('tensorflow.grpc.WorkerService', 'RecvTensor'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.RecvTensorResponse.FromString,
      ('tensorflow.grpc.WorkerService', 'RegisterGraph'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.RegisterGraphResponse.FromString,
      ('tensorflow.grpc.WorkerService', 'RunGraph'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.RunGraphResponse.FromString,
      ('tensorflow.grpc.WorkerService', 'Tracing'): tensorflow_dot_core_dot_protobuf_dot_worker__pb2.TracingResponse.FromString,
    }
    cardinalities = {
      'CleanupAll': cardinality.Cardinality.UNARY_UNARY,
      'CleanupGraph': cardinality.Cardinality.UNARY_UNARY,
      'CreateWorkerSession': cardinality.Cardinality.UNARY_UNARY,
      'DeleteWorkerSession': cardinality.Cardinality.UNARY_UNARY,
      'DeregisterGraph': cardinality.Cardinality.UNARY_UNARY,
      'GetStatus': cardinality.Cardinality.UNARY_UNARY,
      'Logging': cardinality.Cardinality.UNARY_UNARY,
      'RecvTensor': cardinality.Cardinality.UNARY_UNARY,
      'RegisterGraph': cardinality.Cardinality.UNARY_UNARY,
      'RunGraph': cardinality.Cardinality.UNARY_UNARY,
      'Tracing': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'tensorflow.grpc.WorkerService', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
